{"version":3,"sources":["../plan.js"],"names":["guestCount","tableSize","tableCount","positiveSaturation","negativeSaturation","plan","guests","Array","fill","map","_","i","positive","generateConstraints","negative","count","con","Set","size","g1","Math","floor","random","g2","add","id"],"mappings":";;;;;;;;AAAA,IAAIA,aAAa,KAAjB;AACA,IAAIC,YAAY,EAAhB;AACA,IAAIC,aAAa,IAAjB;AACA,IAAIC,qBAAqB,GAAzB;AACA,IAAIC,qBAAqB,GAAzB;;AAEA,IAAIC,OAAO,EAAX;;AAEAA,KAAKC,MAAL,GAAc,IAAIC,KAAJ,CAAUP,UAAV,EAAsBQ,IAAtB,CAA2B,IAA3B,EAAiCC,GAAjC,CAAqC,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAV;AAAA,CAArC,CAAd;AACAN,KAAKJ,SAAL,GAAiBA,SAAjB;AACAI,KAAKH,UAAL,GAAkBA,UAAlB;AACAG,KAAKO,QAAL,GAAgBC,oBAAoBb,aAAaG,kBAAjC,CAAhB;AACAE,KAAKS,QAAL,GAAgBD,oBAAoBb,aAAaI,kBAAjC,CAAhB;;AAEA,SAASS,mBAAT,CAA6BE,KAA7B,EAAmC;AAC/B,QAAIC,MAAM,IAAIC,GAAJ,EAAV;AACA,WAAMD,IAAIE,IAAJ,GAAWH,KAAjB,EAAuB;AACnB,YAAII,KAAKC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBtB,UAA3B,CAAT;AACA,YAAIuB,WAAJ;AACA,WAAE;AACEA,iBAAKH,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBtB,UAA3B,CAAL;AACH,SAFD,QAEOuB,OAAOJ,EAFd;AAGA,YAAGA,KAAKI,EAAR;AACI;AADJ,uBACe,CAACA,EAAD,EAAKJ,EAAL,CADf;AACKA,cADL;AACSI,cADT;AAAA,SAEAP,IAAIQ,GAAJ,CAAQL,KAAKI,KAAKvB,UAAlB;AACH;AACD,WAAO,6BAAIgB,GAAJ,GAASP,GAAT,CAAa;AAAA,eAAM,CAACgB,KAAKzB,UAAN,EAAkBoB,KAAKC,KAAL,CAAWI,KAAKzB,UAAhB,CAAlB,CAAN;AAAA,KAAb,CAAP;AACH;;kBAEcK,I","file":"plan.js","sourcesContent":["let guestCount = 10000;\nlet tableSize = 10;\nlet tableCount = 1500;\nlet positiveSaturation = .10;\nlet negativeSaturation = .25;\n\nlet plan = {};\n\nplan.guests = new Array(guestCount).fill(null).map((_, i) => i);\nplan.tableSize = tableSize;\nplan.tableCount = tableCount;\nplan.positive = generateConstraints(guestCount * positiveSaturation);\nplan.negative = generateConstraints(guestCount * negativeSaturation);\n\nfunction generateConstraints(count){\n    let con = new Set();\n    while(con.size < count){\n        let g1 = Math.floor(Math.random() * guestCount);\n        let g2;\n        do{\n            g2 = Math.floor(Math.random() * guestCount);\n        }while(g2 === g1);\n        if(g1 > g2)\n            [g1, g2] = [g2, g1];\n        con.add(g1 + g2 * guestCount);\n    }\n    return [...con].map(id => [id % guestCount, Math.floor(id / guestCount)]);\n}\n\nexport default plan;"]}